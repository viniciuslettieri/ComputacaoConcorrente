/*
Aplicacao:
Soma de prefixo com multithread

Condicao logica da aplicacao: 
Todas as threads devem executar seu processamento e aguardar o fim das demais.
Apenas quando todas terminarem o processamento que poderão receber o sinal
para realizarem o processamento novamente.
*/

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

/* Variáveis Globais */
pthread_mutex_t mutex;
pthread_cond_t cond;
int NTHREADS, *vetor, *vetor_checagem, *aux, passo_atual, tot_passos, bloqueadas, i_atual, finalizadas;

/* Funcao de Barreira */
void barreira() {
    pthread_mutex_lock(&mutex);
    int i;
    if(bloqueadas == (NTHREADS-finalizadas-1)) { 			// Ultima thread a chegar na barreira
      	// realizamos a soma vetor[id] += vetor[id-i_atual]
		for(i = finalizadas; i < NTHREADS; i++) {
			vetor[i] += aux[i];
		}
		
		i_atual = i_atual << 1;
		pthread_cond_broadcast(&cond);
      	bloqueadas=0;
    }else{													// Demais threads se bloqueiam
      	bloqueadas++;
      	pthread_cond_wait(&cond, &mutex);
    }
    
	pthread_mutex_unlock(&mutex);
}

/* Tarefa da Thread */
void *tarefa (void *arg) {
	int id = *(int*)arg;

	while(id - i_atual >= 0) {
		aux[id] = vetor[id - i_atual];
		
		// sincronizacao condicional
		barreira();
	}
	finalizadas++;
	
	pthread_exit(NULL);
}

int main(int argc, char *argv[]) {
	int i;
	
	/* Leitura  */
	printf("Entre com a quantidade de posicoes do vetor: ");
	scanf("%d", &NTHREADS);
	
	vetor = (int*) malloc(sizeof(int)*NTHREADS);
	if(vetor == NULL){
		fprintf(stderr, "Erro de malloc!\n");
		exit(1);	
	}	
	vetor_checagem = (int*) malloc(sizeof(int)*NTHREADS);
	if(vetor_checagem == NULL){
		fprintf(stderr, "Erro de malloc!\n");
		exit(1);	
	}
	aux = (int*) malloc(sizeof(int)*NTHREADS);
	if(aux == NULL){
		fprintf(stderr, "Erro de malloc!\n");
		exit(1);	
	}
	
	printf("Entre com a sequencia de valores: \n");
	for(i=0; i<NTHREADS; i++){
		scanf("%d", &vetor[i]);
		vetor_checagem[i] = vetor[i];
	}
	
	/* Variaveis Locais */
	pthread_t threads[NTHREADS];
	int id[NTHREADS];
	
	/* Inicialização */
	pthread_mutex_init(&mutex, NULL);
	pthread_cond_init(&cond, NULL);
	bloqueadas = 0; finalizadas = 0;
	passo_atual = 1;
	i_atual = 1;
	tot_passos = log2(NTHREADS);
	
	/* Cria as threads */
	for(i = 0; i < NTHREADS; i++) {
		id[i]=i;
		pthread_create(&threads[i], NULL, tarefa, (void*)&id[i]);
	}
	
	/* Espera todas as threads completarem */
	for(i = 0; i < NTHREADS; i++) {
		pthread_join(threads[i], NULL);
	}
	
	/* Checa o resultado */
	printf("Saida: \n");
	for(i = 0; i < NTHREADS; i++) {
		if(i>0) vetor_checagem[i] += vetor_checagem[i-1];
		
		printf("%d ", vetor[i]);
		
		if(vetor_checagem[i] != vetor[i]){
			printf("\nO somatorio esta errado!\n");
			return 2;
		}
	}
	printf("\nO somatorio esta correto!\n");
	
	/* Desaloca variaveis e termina */
	pthread_mutex_destroy(&mutex);
	pthread_cond_destroy(&cond);
	free(vetor);
	free(vetor_checagem);
	free(aux);
	
	return 0;
}
