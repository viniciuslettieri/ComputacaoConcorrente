#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <math.h>
#include "timer.h"

#define min(a,b) (a<b?a:b)

long long int ntermos;
int nthreads;

// tarefa concorrente para calcular pi
void *tarefa(void *arg){
	long int id = (long int) arg;
	long long int tambloco = ntermos/nthreads;
	long long int ini = id*tambloco;			// inicio do intervalo	(inclusive)
	long long int fim = ini + tambloco;			// fim do bloco (exclusive)
	double *soma;
	
	soma = (double*) malloc(sizeof(double));
	if(soma == NULL){
		fprintf(stderr, "Erro de malloc\n");
		exit(1);
	}
	
	// o ultimo precisa ir ate o fim, corrigindo a imprecisao de intervalos
	if(id == nthreads-1) 
		fim = ntermos;	
	
	*soma = 0;
	for(long long int i=ini; i<fim; i++){
		if(i%2 == 0){
			*soma += 1/((double)(2*i+1));
		}else{
			*soma -= 1/((double)(2*i+1));
		}
	}
	
	//printf("Thread %ld responsavel por [1/%lld, 1/%lld]: %.15lf\n", id, 2*ini+1, 2*fim-1, *soma);
	
	pthread_exit((void*) soma);
}

// funcao para calcular pi sequencialmente
double get_pi_seq(){
	double pi_seq = 0;
	for(long long int i=0; i<ntermos; i++){
		if(i%2 == 0)
			pi_seq += 1/((double)(2*i+1));
		else
			pi_seq -= 1/((double)(2*i+1));
		
		//printf("Termo (1/%lld): %.15lf\n", (2*i+1), 1/((double)(2*i + 1)));
	}
	pi_seq *= 4;
	
	return pi_seq;
}

int main(int argc, char *argv[]){
	double pi_seq, pi_conc, *retornoThread;
	double inicio, final, tempoConc, tempoSeq;

	pthread_t *tid;		
	
// Recebimento dos parametros de entrada [numero de termos da sÃ©rie]
	if(argc < 3){
		fprintf(stderr, "Execute o programa com: %s <numero de termos> <numero de threads>\n", argv[0]);
		return 1;
	}
	ntermos = atoll(argv[1]);
	nthreads = atoi(argv[2]);
	
	nthreads = min(ntermos, nthreads);		// nao queremos mais threads que termos

// Aloca o vetor de identificadores
	tid = (pthread_t*) malloc(sizeof(pthread_t) * nthreads);
	if(tid == NULL){
		fprintf(stderr, "Erro de malloc\n");
		return 2;
	}

// Realizacao da soma dos termos Sequencial
	GET_TIME(inicio);
	
	pi_seq = get_pi_seq();
	
	GET_TIME(final);
	tempoSeq = final - inicio;

// Realizacao da soma dos termos Concorrente
// Nossa estrategia para melhorar a precisao sera dividir as tarefas em blocos de intervalo.
// Isso porque somaremos os valores mais proximos entre si juntos.
	GET_TIME(inicio);
	// Criacao das threads
	for(long int i=0; i<nthreads; i++){
		if(pthread_create(tid+i, NULL, tarefa, (void*)i)){
			fprintf(stderr, "Erro de pthread_create\n");
			return 3;
		}
	}

	// Esperando os resultados
	pi_conc = 0;
	for(long int i=0; i<nthreads; i++){
		if(pthread_join(*(tid+i), (void**) &retornoThread)){
			fprintf(stderr, "Erro de pthread_join\n");
			return 3;
		}
		
		pi_conc += *retornoThread;			// soma os retornos
		free(retornoThread);
	}
	pi_conc *= 4;

	GET_TIME(final);
	tempoConc = final - inicio;
	
// Demonstracao dos resultados
	printf("O valor pi da biblioteca eh:		 %.15lf\n", M_PI);
	printf("\nNosso pi computado sequencial foi:	 %.15lf\n", pi_seq);	
	printf("O erro absoluto do sequencial foi: 	 %.15lf\n", fabs(pi_seq - M_PI));
	printf("O tempo de execucao sequencial foi:	 %.15lf\n", tempoSeq);
	printf("\nNosso pi computado concorrente foi:	 %.15lf\n", pi_conc);	
	printf("O erro absoluto do concorrente foi:	 %.15lf\n", fabs(pi_conc - M_PI));
	printf("O tempo de execucao concorrente foi:	 %.15lf\n", tempoConc);
	printf("\nO ganho foi de %.5lf\n", tempoSeq/tempoConc);

// Liberando memoria
	free(tid);

	return 0;
}
